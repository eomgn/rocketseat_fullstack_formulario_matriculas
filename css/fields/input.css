/* removendo css padrão do navegador com appearence:none e definindo algumas valores css para os inputs e select*/
input,
select,
textarea {
  appearance: none;
  width: 100%;
  border-radius: 0.5rem;
  border: 2px solid transparent;
  outline: 0.0625rem solid var(--stroke-default);

  padding: 0.75rem 1rem;

  font: var(--text);
}

label {
  font: var(--text-sm);
  color: var(--text-secondary);
  display: block;
  margin-bottom: 0.25rem;
}

/* aplicando um padrão de css para quando houver foco no campo input, ou seja quando o usuario estiver clicado no campo */
input:focus,
select:focus,
textarea:focus,
input[type="date"]:focus-within {
  outline: 0.25rem solid var(--surface-secondary);
  border: 0.125rem solid var(--text-highlight);
  outline-offset: 0.0625rem;
}

/*  removendo o icone padrão do input do tipo data e aplicando um novo icone */
input[type="date"] {
  position: relative;

  &::-webkit-calendar-picker-indicator {
    opacity: 0;
  }

  &::before {
    position: absolute;
    content: "";
    background-image: url(../../assets/icons/calendar-03.svg);
    background-position: center;
    background-size: contain;
    right: 1rem;
    width: 1.25rem;
    height: 1.25rem;

    top: 50%;
    transform: translateY(-50%);
  }
}
/* colocando um icone no input select */
select {
  background-image: url(../../assets/icons/arrow-down-01.svg);
  background-repeat: no-repeat;
  background-position: calc(100% - 1rem);
}

.address .flex {
  gap: 1.25rem;
}

.input-wrapper:has([disabled]) {
  opacity: 0.5;
}

input {
  /* definindo propriedades para quando o input tiver o atributo disabled */
  &[disabled] {
    background-color: var(--surface-disabled);
    border: 1px solid var(--stroke-default);
    color: var(--text-primary);
  }

  /* se a tag input for seguida de uma tag small (como irmão) */
  & + small {
    display: inline-block;
    margin-top: 0.25rem;
    color: #78716c;
    font: var(--text-sm);
  }

  /* se a tag input for do tipo invalida */
  &:invalid {
    border: 0.125rem solid var(--semantic-error);
  }

  /* se a tag input tiver o atributo required e seguida de uma tag com uma classe .error (como irmão)*/
  &:required + .error {
    display: flex;
    align-items: center;
    gap: 0.25rem;

    font: var(--text-sm);
    color: var(--semantic-error);

    margin-top: 0.25rem;
  }

  /* ao sair do foco e o valor for valido e seguida de uma tag com uma classe .error (como irmão)*/
  &:not(:focus):valid + .error {
    display: none;
  }
}
